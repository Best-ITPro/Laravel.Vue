Laravel.Vue - проект работы с Vue.JS в Laravel.
----------------------------------------------

Laravel.Vue запуск на Open Server

если OpenServer не был настроен ранее для других проектов, делаем следующее:
1.1.) Установка Composer на OpenServer
Допустим, мы установили Open Server в каталог D:\OSPanel\. Переходим к текущему модулю PHP, например: D:\OSPanel\modules\php\PHP_7.3-x64

1.2.) Запускаем:
php -r "readfile('https://getcomposer.org/installer');" | php
или Composer-Setup.exe, указывая  D:\OSPanel\modules\php\PHP_7.3-x64

1.3) Проверяем какая версия стоит командой: 
php composer.phar -V


1.4) Создаём .bat файл и в дальнейшем можно будет работать без указания php composer.phar, просто указывая composer:
echo @php "%~dp0composer.phar" %*>composer.bat


Итак, установка Laravel
1.5) D:\OSPanel\domains\laravel.vue

Запускаем консоль
cd laravel.vue
composer -V (допустим, Composer version 1.10.5 2020-04-10 11:44:22)

Если всё ок, поднимаемся на уровень выше cd ..

и запускаем команду

composer create-project --prefer-dist laravel/laravel laravel.vue
где laravel.vue – каталог нашего проекта


2) Устанавливаем Node.JS (если не был установлен) https://nodejs.org/en/

Запускаем OpenServer, и идем в настройки. Во вкладке «Сервер» в поле «Настройка использования переменной Path» выставляем «Свой Path + userdata/config/path.txt». Создаем файл в папке \OpenServer\userdata\config\ под именем path.txt следующего содержания:

C:\Program Files\nodejs\

Перезапускаем OpenServer
Проверяем npm -i

3) cd laravel.vue
npm install

4) В OpenServer идем в настройки. Во вкладке «Домены» добавляем папку D:\OSPanel\domains\laravel.vue\public -> имя домена laravel.vue
Проверяем в браузере http://laravel.vue

5)  В OpenServer идём в «Дополнительно» phpmyadmin (логин root без пароля)

Создаём базу laravel.vue в кодировке utf8mb4_general_ci

Редактируем файл .env в \OSPanel\domains\laravel.vue\

APP_NAME=Laravel.Vue
APP_URL=http://laravel.vue
DB_DATABASE=laravel.vue

Можно настроить smtp (на примере Яндекс):

MAIL_DRIVER=smtp
MAIL_HOST=smtp.yandex.ru
MAIL_PORT=587
MAIL_USERNAME=ВАШ_ЛОГИН
MAIL_PASSWORD=ВАШ_ПАРОЛЬ
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=ВАШ_EMAIL
MAIL_FROM_NAME="${APP_NAME}"

6) 	В консоли в папке \OSPanel\domains\laravel.vue\ запускаем команду php artisan config:cache

7) В :\OSPanel\domains\laravel.vue\resources\views\welcome.blade.php меняем:

< title >Laravel< / title >
на < title >{{ config('app.name') }}< / title >
Надпись Laravel в < div class="title m-b-md">
на {{ config('app.name') }} ;)

Проверяем в браузере http://laravel.vue

Мы должны увидеть: Laravel.Vue ;)


8) Версию установленного Laravel можно поверить командой (в консоли в папке проекта):

php artisan -V

В нашем случае это Laravel Framework 7.8.1

9) Открываем папку нашего проекта в PHPStorm или в другой IDE


10) Модифицируем файл app/Providers/AppServiceProvider.php

Без этих изменений может возникать ошибка:
Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes
Дело в том, что в Laravel 5.4 изменилась кодировка по умолчанию для базы данных (теперь это utf8mb4 для поддержки emoji). Ошибка Specified key was too long error проявляется только для MySQL ниже v5.7.7 и в старых версиях MariaDB.

Итак, в app/Providers/AppServiceProvider.php добавляем:

- Добавьте строку в блоке use: use Illuminate\Support\Facades\Schema;
- Добавьте в метод boot строку: Schema::defaultStringLength(191);

11) Запускаем миграции: php artisan migrate

Migration table created successfully.
Migrating: 2014_10_12_000000_create_users_table
Migrated:  2014_10_12_000000_create_users_table (0.36 seconds)
Migrating: 2019_08_19_000000_create_failed_jobs_table
Migrated:  2019_08_19_000000_create_failed_jobs_table (0.28 seconds)

В базе данных laravel.vue создались таблицы failed_jobs и users


12) Добавляем механизм авторизации пользователей

Каркас фронтенда, обычно поставляемый с предыдущими версиями Laravel, был перенесен в отдельный пакет laravel/ui. Это позволяет создавать и версионировать пользовательские интерфейсы отдельно от основного фреймворка. В результате этого изменения в дефолтном каркасе фреймворка не будет Bootstrap и Vue.
Также была вынесена из фреймворка команда make:auth.Чтобы восстановить традиционный каркас Vue/Bootstrap, имеющийся в предыдущих версиях Laravel, вы можете установить пакет laravel/ui и использовать artisan команду ui для установки фронтенд каркаса.

Устанавливаем пакет: composer require laravel/ui
Устанавливаем фронтенд: php artisan ui vue --auth
Загружаем пакеты фронтенда: npm install


13) Устанавливаем панель отладчика DebugBar 

https://github.com/barryvdh/laravel-debugbar

composer require barryvdh/laravel-debugbar --dev

Debugbar доступен, когда APP_DEBUG=true в файле .env

14) Запускаем нашу сборку в режиме разработчика: 

php artisan config:cache
npm run dev

В результате последней команды будут скомпилированы файлы стилей и скриптов
/css/app.css
/js/app.js

15) 

В результате выполнения п.12 
В папке D:\OSPanel\domains\laravel.vue\resources\views
создаётся файл home.blade.php

он содержит строку @extends('layouts.app') 
т.е. подключение файла layouts/app.blade.php

home.blade.php расширяет layouts/app.blade.php

а в layouts/app.blade.php мы видим подключение стилей и скриптов из папки public

<!-- Styles -->
<link href="{{ asset('css/app.css') }}" rel="stylesheet">
<!-- Scripts -->
<!-- Атрибут defer откладывает выполнение скрипта до тех пор, пока вся страница не будет загружена полностью. -->
<script src="{{ asset('js/app.js') }}" defer></script>

эти стили и скрипты собираются командой npm run dev
которую мы использовали в п.14

сборка производится на основе 
D:\OSPanel\domains\laravel.vue\resources\js\app.js
D:\OSPanel\domains\laravel.vue\resources\sass\app.scss

чтобы не запускать npm run dev каждый раз при изменении стилей или скриптов, можно воспользоваться командой
npm run watch
которая автоматически будет отлавливать все изменения.

16) Проверяем регистрацию на сайте
http://laravel.vue/register

логинимся - всё работает.


17) Самое время закоммитить изменения (!)

cd D:\OSPanel\domains\laravel.vue\
git init
git add .
git commit -m "Laravel.Vue.Blank"


Ссылка на исходный код к данному материалу:
https://github.com/Best-ITPro/Laravel.Vue.Blank


;)

--------------

Предыдущая часть "Работа с Vue.JS в Laravel 7 (часть 1)":

http://best-itpro.ru/news/vuejs_laravel7_1/

https://github.com/Best-ITPro/Laravel.Vue.Blank


Данная часть промежуточная, посвящённая сборке frontend на laravel:

18) Сборка фронтенда (Laravel Mix)

Базовая сборка проекта Laravel производится на основе вот этих файлов: 
D:\OSPanel\domains\laravel.vue\resources\js\app.js
D:\OSPanel\domains\laravel.vue\resources\sass\app.scss
к этим файлам мы будем добавлять свои файлы, и файлы подключаемых библиотек (!)

Для простоты реализации в нашем материале "Базовая сборка блога (статьи, категории) на Laravel 7.x" (http://best-itpro.ru/news/laravel7_blog/) мы выкладывали js и css в папку public:
D:\OSPanel\domains\laravel.empty.blog\public\css
D:\OSPanel\domains\laravel.empty.blog\public\js
+ даже сделали дополнительную папку D:\OSPanel\domains\laravel.empty.blog\public\extentions, в которую положили такие отдельные пакеты, как ckeditor и fontawesome-free-5.13.0-web.

Так вот, так делать не надо! Это было сделано для упрощения, и именно так бы мы могли поступить, если бы делали проект, допустим, на чистом PHP, а не на фреймворках подобных Laravel. 

Когда вы делаете нормальный проект, все js, css, sass и прочие файлы должны проходить сборку, и появляться в проекте уже в скомпилированном виде. Для этого и нужна сборка фронтенда (Laravel Mix).

В корне проекта есть файл webpack.mix.js, содержащий строки:
mix.js('resources/js/app.js', 'public/js') 
   .sass('resources/sass/app.scss', 'public/css');

Данные записи означают, что на основе базовых файлов из resources/js/ и resources/sass/ будут собраны файлы в публичной части в папках public/js и public/css.

Собираются одной из следующих команд:

npm run production - данный вариант, как видно из самой команды, собирает исходники уже для продакшн - готового проекта, запущенного в эксплуатацию. Все js, css, sass и прочие файлы будут скомпилированы в сжатом виде (для ускорения загрузки).

npm run dev - файлы компилируются не в сжатом, а в обычном виде, используется при разработке проекта. Если мы вносим какие-то изменения в исходники в папке resources, команду нужно повторить для повторной сборки, и так каждый раз.

npm run watch - данная команда используется при разработке проекта, она продолжит выполняться в терминале и будет следить за всеми изменениями ваших ресурсов. Когда что-либо изменится, автоматически скомпилируются новые файлы. В отличии от предыдущей, запускается один раз и работает, пока вы не остановите.

npm run watch-poll - дополнительный вариант предыдущей команды.

Итак, как же нам добавлять свли файлы и файлы библиотек сторонних разработчиков в свой проект.

CSS - начнем с него. Тут есть 2 варианта:
-----------------------------------------
1) мы все пишем в resources/sass/app.scss, и он уже компилируется в public/css.app.css, который мы подключаем в шаблонах Laravel.
2) мы делаем свой файл, допустим resources/css/style.css и компелируем его в отдельный файл. В таком случае, наш файл webpack.mix.js, будет уже иметь строки:
mix.js('resources/js/app.js', 'public/js') 
   .sass('resources/sass/app.scss', 'public/css')
   .styles('resources/css/style.css', 'public/css/all.css');
   
базовый app.sass будет собран в public/css/app.css   
наш style.css в public/css/all.css

Подключение в шаблоне производится командами:

<link href="{{ asset('css/app.css') }}" rel="stylesheet">
<link href="{{ asset('css/all.css') }}" rel="stylesheet">

подключение js делается так:

<script src="{{ asset('js/app.js') }}" defer></script>

Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме и запускать его после загрузки страницы, так что неважно, в каком месте шаблона будет подключение js.

Это подключение можно увидеть в файле /resources/views/layouts/app.blade.php нашего исходного кода в репозитории https://github.com/Best-ITPro/Laravel.Vue

JS - файлы скриптов.
--------------------
Общие скрипты можно также писать в resources/js/app.js или в отдельном файле, но тут гораздо более интересный вопрос возникает не со своими скриптами, с бибоиотеками сторонних разработчиков.

В наших предыдущих материалах
http://best-itpro.ru/news/laravel_7/
http://best-itpro.ru/news/laravel7_blog/
http://best-itpro.ru/news/vuejs_laravel7_1/
мы указывали на необходимость использования Node.JS в сборке проектов Larael и описывали способы его установки.

В составе Node.JS идет менеджер пакетов NPM.
Это именно он запускает сборку проекта в предыдущих командах npm run dev или npm run watch

Сайт менеджера https://www.npmjs.com - вводим название библиотеки и видим способ ее установки

Второй вариант - установить дополнительный более быстрый и безопасный менеджер пакетов Yarn
Для установки Yarn в папке проекта надо запустить команды: npm i yarn -g
Проверяем факт установки и версию: yarn -v
как правило эта команда сразу сделает и инициализацию yarn, т.к. в папке пректа уже есть файл package.json, общий для npm и yarn, он содержит описание всех установленных библиотек (пакетов) в проектке.

Более подробно о yarn: https://classic.yarnpkg.com/ru/

Библиотеку стороннего разработчика (пакет), установленную через npm, через yarn устанавливать не надо. Мы ркомендуем использовать yarn и искать пакеты именно на его сайте.

Установка пакетов:

yarn add имя_пакета
или
npm install имя_пакета

Удаление пакетов:

yarn remove имя_пакета
или
npm uninstall имя_пакета 

Подключение пакета в проект (!)
---------------------------
Пакет мало установить - его еще нужно и подключить в проект. 

Все пакеты необходимые дополнительные пакеты, которые мы устанавливаем в проекте, необходимо подключать в файл:
resources/js/bootstrap.js командой require('имя_пакета');

сам bootstrap.js подключается в свою очередь в resources/js/app.js

С файлом bootstrap.js есть одна хитрость - дело в том, что многие пакеты (библиотеки) используют в своей работе самую известную библиотеку js - jquery. Причем они должны подключаться уже после подключения jquery в проект.

Для этого в bootstrap.js есть секция:

try {
    window.Popper = require('popper.js').default;
    window.$ = window.jQuery = require('jquery');

    require('bootstrap');
} catch (e) {}

вот именно сюда и надо подключать библиотеки подобного типа.

Для примера и закрепления всего вышесказанного рассмотрим подключение в проект известного слайдера OwlCarousel, использование которого в Laravel часто вызывает трудности.

Как подключить OwlCarousel в Laravel.

На сайте yarn в поисковике набираем имя пакета owlcarousel и находим его описание на странице 
https://classic.yarnpkg.com/ru/package/owl.carousel

Как сказано на данной странице, для установки пакета используем команду: yarn add owl.carousel
(в это npm будет команда: npm i owl-carousel)

После этого добавляем подключение OwlCarousel в bootstrap.js:

try {
    window.Popper = require('popper.js').default;
    window.$ = window.jQuery = require('jquery');

    require('bootstrap');
    require('owl.carousel');
} catch (e) {}


В файл resources/js/app.js добавляем секцию:

import $ from 'jquery';

$(document).ready(function(){

    $('.owl-carousel').owlCarousel({
        items: 1,
        URLhashListener: true,
        mouseDrag: false
    });
});


Также в соответствии с документацией на https://owlcarousel2.github.io/OwlCarousel2/docs/started-installation.html 
нам надо подключить файлы стилей:

<link rel="stylesheet" href="owlcarousel/owl.carousel.min.css">
<link rel="stylesheet" href="owlcarousel/owl.theme.default.min.css">

копируем эти файлы из состава дистриутива в папку resources/css/ и модифицируем файл webpack.mix.js следующим образом:

mix.js('resources/js/app.js', 'public/js')
   .sass('resources/sass/app.scss', 'public/css')
    .styles([
        'resources/css/style.css',
        'resources/css/owl.carousel/owl.carousel.min.css',
        'resources/css/owl.carousel/owl.theme.default.min.css'
    ], 'public/css/all.css');

Очищаем кеш: php artisan config:cache

Компилируем проект: npm run dev

и наслаждаемся результатом: http://vue.best-itpro.ru

Исходный код к данному примеру можно увидеть в нашем репозитории: 
https://github.com/Best-ITPro/Laravel.Vue


Как развернуть проект на Laravel.

Чтобы развернуть у себя проект на Larael, полученный из репозитория, авполните ряд действий, описанных в нашей публикации:
"Базовая сборка блога (статьи, категории) на Laravel 7.x"
http://best-itpro.ru/news/laravel7_blog/




;)


// ------------


Как 